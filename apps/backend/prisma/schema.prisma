// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

/// @seed = "npx ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  password        String
  roleId          String?  // Link to roles table instead of hardcoded string
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  verificationCodes VerificationCode[]
  passwordResets    PasswordReset[]
  reviews          Review[]
  favorites        Favorite[]
  ratings          Rating[]
  cart             Cart?
  orders           Order[]
  paymentHistory   PaymentHistory[]
  activities       Activity[]
  
  // RBAC Relations
  role            Role?           @relation("UserRole", fields: [roleId], references: [id])
  userTeams       UserTeam[]
  createdRoles    Role[]          @relation("RoleCreator")
  createdTeams    Team[]          @relation("TeamCreator")

  @@map("users")
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // 'order', 'user', 'product', 'payment', 'revenue', 'system'
  title       String
  description String
  metadata    Json?    // Additional data like order ID, user ID, etc.
  userId      String?  // User who performed the action (if applicable)
  createdAt   DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("activities")
}

// RBAC System Tables
model Resource {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "customer", "order", "product"
  displayName String   // e.g., "Customer Management", "Order Management"
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  roleResources RoleResource[]

  @@map("resources")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "view", "create", "edit", "delete"
  displayName String   // e.g., "View", "Create", "Edit", "Delete"
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  roleResources RoleResource[]

  @@map("permissions")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "user", "admin", "superadmin"
  displayName String   // e.g., "User", "Admin", "Super Admin"
  description String?
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator      User           @relation("RoleCreator", fields: [createdBy], references: [id])
  roleResources RoleResource[]
  teamRoles    TeamRole[]
  users        User[]         @relation("UserRole")

  @@map("roles")
}

model RoleResource {
  id           String @id @default(cuid())
  roleId       String
  resourceId   String
  permissionId String
  createdAt    DateTime @default(now())

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  resource   Resource   @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, resourceId, permissionId])
  @@map("role_resources")
}

model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator    User       @relation("TeamCreator", fields: [createdBy], references: [id])
  userTeams UserTeam[]
  teamRoles TeamRole[]

  @@map("teams")
}

model UserTeam {
  id     String @id @default(cuid())
  userId String
  teamId String
  joinedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("user_teams")
}

model TeamRole {
  id     String @id @default(cuid())
  teamId String
  roleId String
  createdAt DateTime @default(now())

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([teamId, roleId])
  @@map("team_roles")
}

model VerificationCode {
  id        String   @id @default(cuid())
  userId    String
  email     String
  code      String
  type      String   // 'email_verification'
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_codes")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  email     String
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  iconFileId  String?  // Reference to File model
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subcategories Subcategory[]
  products      Product[]
  iconFile      File?   @relation("CategoryIcon", fields: [iconFileId], references: [id])

  @@map("categories")
}

model Subcategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  iconFileId  String?  // Reference to File model
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products Product[]
  iconFile File?   @relation("SubcategoryIcon", fields: [iconFileId], references: [id])

  @@map("subcategories")
}

// Products - Base product information
model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  sku           String?  @unique  // Base SKU for the product
  price         Decimal? @db.Decimal(10, 2)  // Base product price
  salePrice     Decimal? @db.Decimal(10, 2)  // Base product sale price
  currency      String   @default("USD")
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  sortOrder     Int      @default(0)
  categoryId    String?
  subcategoryId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category       Category?        @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory?     @relation(fields: [subcategoryId], references: [id])
  variants       ProductVariant[] // Product can have multiple variants
  images         ProductImage[]   // Product-level images
  reviews        Review[]
  ratings        Rating[]
  favorites      Favorite[]
  flashSaleItems FlashSaleItem[]

  @@map("products")
}

// Product Variants - Different versions of a product (e.g., size, color, material)
model ProductVariant {
  id         String   @id @default(cuid())
  productId  String
  sku        String   @unique  // Unique SKU for this variant
  name       String   // Variant name (e.g., "Red - Large", "128GB - Black")
  attributes Json?    // JSON object: { color: "Red", size: "Large", material: "Cotton" }
  isDefault  Boolean  @default(false)  // Mark one variant as default
  isActive   Boolean  @default(true)
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  product    Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  prices     Price[]        // Each variant has its own pricing
  stock      Stock?         // Each variant has its own inventory
  images     ProductImage[] // Each variant can have its own images
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model Cart {
  id        String      @id @default(cuid())
  userId    String?     @unique
  items     CartItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User?       @relation(fields: [userId], references: [id])

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  variantId String   // Links to product variant
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id                    String        @id @default(cuid())
  userId                String?
  guestUserInfo         String?       // JSON string for guest user info
  shippingAddress       String        // JSON string for shipping address
  billingAddress        String        // JSON string for billing address
  subtotal              Float
  shippingCost          Float
  tax                   Float
  total                 Float
  status                String        @default("pending") // pending, confirmed, processing, shipped, delivered, cancelled
  paymentStatus         String        @default("pending") // pending, completed, failed, refunded
  stripePaymentIntentId String?
  notes                 String?
  isGuestOrder          Boolean       @default(false)     // Whether this is a guest order
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  user                  User?         @relation(fields: [userId], references: [id])
  items                 OrderItem[]
  paymentHistory        PaymentHistory[]

  @@map("orders")
}

model PaymentHistory {
  id                    String   @id @default(cuid())
  orderId               String
  userId                String?  // User who made the payment (null for guest orders)
  stripePaymentIntentId String
  amount                Float
  currency              String   @default("USD")
  status                String   // succeeded, failed, pending, cancelled
  paymentMethod         String?  // card, bank_transfer, etc.
  last4                 String?  // Last 4 digits of card
  brand                 String?  // Visa, Mastercard, etc.
  receiptUrl            String?  // Stripe receipt URL
  failureReason         String?  // Reason for failure if any
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  order                 Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user                  User?    @relation(fields: [userId], references: [id])

  @@map("payment_history")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  variantId String   // Links to product variant
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Price {
  id        String   @id @default(cuid())
  variantId String   // Links to product variant
  price     Decimal  @db.Decimal(10, 2)
  salePrice Decimal? @db.Decimal(10, 2)
  currency  String   @default("USD")
  isActive  Boolean  @default(true)
  validFrom DateTime @default(now())
  validTo   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("prices")
}

model Stock {
  id           String   @id @default(cuid())
  variantId    String   @unique  // Links to product variant
  quantity     Int      @default(0)
  reserved     Int      @default(0)
  minThreshold Int      @default(5)
  maxThreshold Int?
  isInStock    Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("stock")
}

// Product Images - Can link to either product or variant
model ProductImage {
  id        String   @id @default(cuid())
  productId String?  // Optional: for product-level images
  variantId String?  // Optional: for variant-specific images
  fileId    String   // Reference to File model
  altText   String?
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  file    File            @relation("ProductImage", fields: [fileId], references: [id])

  @@map("product_images")
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  userId     String
  title      String?
  content    String
  rating     Int      // 1-5 stars
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("reviews")
}

model Rating {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5 stars
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("ratings")
}

model Favorite {
  id        String   @id @default(cuid())
  productId String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("favorites")
}

model FlashSale {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  discount    Int      // Percentage discount
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items FlashSaleItem[]

  @@map("flash_sales")
}

model FlashSaleItem {
  id            String   @id @default(cuid())
  flashSaleId   String
  productId     String
  salePrice     Decimal  @db.Decimal(10, 2)
  originalPrice Decimal  @db.Decimal(10, 2)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  flashSale FlashSale @relation(fields: [flashSaleId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([flashSaleId, productId])
  @@map("flash_sale_items")
}

model File {
  id          String   @id @default(cuid())
  originalName String
  publicId    String   @unique
  url         String
  secureUrl   String
  format      String
  bytes       Int
  width       Int?
  height      Int?
  type        String   // image, video, document, audio, other
  status      String   // uploading, processing, ready, error, deleted
  folder      String?
  tags        String[]
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryIcons     Category[]       @relation("CategoryIcon")
  subcategoryIcons  Subcategory[]    @relation("SubcategoryIcon")
  productImages     ProductImage[]   @relation("ProductImage")

  @@map("files")
}
