---
alwaysApply: true
---
## 📘 Project Development Guide

### 🏗️ Folder Structure

This project follows a clean and modular file architecture to ensure scalability and maintainability.

```
src/
│
├── apis/
│   ├── routes.ts
│   └── services/
│       ├── baseApi.tsx
│       └── authApi.tsx
│
├── components/
│   ├── ui/
│   │   └── Field.tsx
│   └── (global reusable components)
│
├── contexts/
│   └── AuthContext.tsx
│
├── hooks/
│   └── useAuth.tsx
│
├── layouts/
│   └── AppLayout/
│       ├── Sidebar.tsx
│       ├── Header.tsx
│       └── index.tsx
│
├── pages/
│   └── auth/
│       └── LoginPage.tsx
│
├── routers/
│   ├── routes.ts
│   └── AppRouter.tsx
│
├── sections/
│   └── auth/
│       └── login/
│           ├── LoginForm.tsx
│           ├── FormFields.tsx
│           └── schema.tsx
│
├── store/
│   ├── index.tsx
│   └── slices/
│       └── authSlice.ts
│
├── types/
│   └── auth.ts
│
├── utils/
│   └── currencyFormatter.ts
│
└── views/
    └── auth/
        └── LoginView.tsx
```

---

### 📁 Example: Section Folder Structure

For complex views with multiple components, organize them like this:

```
sections/
└── app/
    └── finance/
        ├── order-detail/
        │   ├── OrderDetailSection.tsx
        │   ├── OrderItemsSection.tsx
        │   ├── OrderSummarySection.tsx
        │   ├── CustomerInfoSection.tsx
        │   ├── ShippingAddressSection.tsx
        │   ├── PaymentInfoSection.tsx
        │   └── OrderNotesSection.tsx
        └── live-orders/
            └── LiveOrdersTable.tsx
```

---

### ⚙️ Tech Stack

- **React 18+**
- **React Router DOM**
- **Redux Toolkit (RTK)** + **RTK Query**
- **Tailwind CSS**
- **Shadcn/UI**
- **TypeScript**
- **Vite** or **Next.js (if SSR required)**

---

### 🧩 Component & File Naming Conventions

| Type | Convention | Example |
|------|-------------|----------|
| React Components | PascalCase | `LoginView.tsx`, `Sidebar.tsx` |
| Hooks | camelCase (prefix `use`) | `useAuth.tsx` |
| Redux Slices | camelCase file, exported with slice name | `authSlice.ts` |
| Variables | camelCase | `firstName`, `userData` |
| Database Keys | snake_case | `first_name`, `user_id` |
| Utility Functions | camelCase | `formatCurrency.ts` |
| Folder Names | lowercase or kebab-case | `auth`, `services`, `sections` |
| Types | PascalCase | `AuthResponse`, `UserPayload` |

---

### 🧱 Coding Rules

1. **Always use functional components** — no class components.
2. **Use TypeScript interfaces or types** for all props and data models.
3. **Keep components small and focused**:
   - Any **large UI logic** or complex forms should be broken down into smaller files under `/sections`.
   - `/views` are used for page-level UI composition.
4. **Use `/components` for global reusable UI**, e.g., buttons, modals, inputs.
5. **No inline CSS** — use **Tailwind classes** or Shadcn components.
6. **Use absolute imports** (`@/components/Button`) — not relative paths like `../../../Button`.
7. **Use `/types` folder** for all data models, API responses, and entity definitions.
8. **Separate comment sections into components**:
   - Every comment section (e.g., `{/* Order Items */}`, `{/* Customer Info */}`) should be a separate component.
   - If the component is globally reusable, place it in `/components`.
   - If the component is feature-specific, place it in `/sections/[feature]/[view-name]/` alongside the main component.
   - Components can be nested in subfolders if needed: `/sections/[feature]/[view-name]/components/`.
   - This improves code organization, reusability, and maintainability.
9. **Sections folder structure**:
   - Organize sections by feature and view: `sections/[feature]/[view-name]/Component.tsx`
   - Example: `sections/app/finance/order-detail/OrderDetailSection.tsx`
   - Other components used within that view go in the same folder
   - Use kebab-case for folder names (e.g., `order-detail`, `live-orders`)

---

### 🧠 Redux & State Management

- Use **Redux Toolkit (RTK)** for global state.
- Use **RTK Query** for data fetching.
- All store logic must be centralized in `/store`.

```ts
// store/index.tsx
import { configureStore } from "@reduxjs/toolkit";
import authReducer from "./slices/authSlice";

export const store = configureStore({
  reducer: {
    auth: authReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
```

---

### 🔗 API Layer

Use `/apis/services` for backend communication.

- `baseApi.tsx`: create the base axios/RTK setup.
- `authApi.tsx`: define authentication endpoints.
- `routes.ts`: contains all endpoint paths.

```ts
// apis/routes.ts
export const AUTH_ROUTES = {
  LOGIN: "/auth/login",
  REGISTER: "/auth/register",
};
```

---

### 📄 Types Management

All type definitions must live inside the `/types` folder.

Example:

```ts
// types/auth.ts
export interface LoginRequest {
  email: string;
  password: string;
}

export interface AuthResponse {
  access_token: string;
  refresh_token: string;
  user: UserProfile;
}

export interface UserProfile {
  id: string;
  first_name: string;
  last_name: string;
  email: string;
}
```

- Use **PascalCase** for type/interface names.
- Import and reuse types across files — **no duplicate type definitions**.

---

### 🧭 Routing

- All routes are defined in `/routers/routes.ts`.
- Use `AppRouter.tsx` for layout-based routing setup.
- Protected routes should be handled with context (`AuthContext`).

---

### 🔒 Authentication Context

- Manage user sessions with React Context API in `/contexts/AuthContext.tsx`.
- Provide login/logout methods and access token state globally.

---

### 🎨 UI & Styling Rules

- Use **Tailwind CSS** for layout and styling.
- Use **Shadcn UI components** for consistency (buttons, dialogs, inputs, etc.).
- Avoid custom CSS unless absolutely required.

```tsx
<Button variant="default" className="w-full mt-4">
  Sign In
</Button>
```

---

### 🧰 Utilities

Keep all helper and reusable logic inside `/utils`.

```ts
// utils/currencyFormatter.ts
export const currencyFormatter = (amount: number) =>
  new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(amount);
```

---

### ⚡ General Best Practices

- ✅ Keep **code clean and minimal** — no unused imports or console logs.
- ✅ Use **async/await** with proper `try/catch` handling.
- ✅ Use **environment variables** for all secrets (`.env`).
- ✅ Write **comments** for complex logic.
- ✅ Maintain **consistent indentation (2 spaces)**.
- ✅ Follow **ESLint + Prettier** rules for formatting.

---

### 🧪 Testing (Optional but Recommended)

Use **Jest + React Testing Library** for component/unit testing.

```
src/
 └── __tests__/
      └── components/
      └── hooks/
```

---

### 🚀 Commit Rules (Recommended)

Follow **Conventional Commits**:
```
feat: add login form validation
fix: resolve token refresh issue
refactor: simplify auth context
style: adjust button spacing
```

---

### 🧭 TL;DR

- Keep components small & modular.
- Use sections for feature-specific code.
- Use components for reusable global UI.
- Maintain consistent naming and structure.
- Use Tailwind + Shadcn for styling.
- Manage global state via Redux Toolkit.
- Follow clean and consistent TypeScript rules.
- Centralize and reuse all TypeScript interfaces in `/types`.

---

### 💡 Cursor AI Notes

- When generating new files, **Cursor** should follow the exact folder structure defined above.
- Always use **PascalCase** for components and **camelCase** for functions or hooks.
- Each new view or section must be separated into logical smaller files.
- Use **RTK Query** or baseApi for any API call.
- Prefer **composition over inheritance**.
- Maintain small, testable, and reusable UI components.
- Define all types and interfaces inside `/types` for strong type safety and consistency.
- For sections: organize by feature and view name: `sections/[feature]/[view-name]/Component.tsx`
- Separate comment sections into their own components in the same folder
- Use kebab-case for folder names in sections (e.g., `order-detail`, `live-orders`)

